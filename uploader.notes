Alright @Hitman if you now use any of the uploaders the init files will look very similar, I made a lot of changes in the backend to auto register all 'upload' contracts and manage separately so you don't have to. All you need to do is call https://github.com/dash-incubator/dapp-image-uploader/blob/main/src/init.js#L14 and if not initialized ( wallet doesn't have funds to register identity etc. ) you just need to recall the init function after funding the mnemonic/wallet https://github.com/dash-incubator/dapp-image-uploader/blob/main/src/init.js#L33 

Most of the changes can be seen here https://github.com/dash-incubator/dapp-image-uploader/blob/main/src/uploader.js all of the pieces that processed/setup the document are also hidden/handled for you in the backend ( dapp-sdk ) all you need to do is supply the input object https://github.com/dash-incubator/dapp-sdk/blob/main/src/apps/upload/image/types.ts#L22 to https://github.com/dash-incubator/dapp-image-uploader/blob/main/src/uploader.js#L6 
- Each input object is different, look in the audio/video directories for the others 
- If you don't know typescript ignore everything else in those files just focus on the Input type, the ?: just means those keys are optional ( you may not need to create/update every key at once ), left hand side is the object key it's expecting, right hand side is the type. 
- File is the input/file type returned by HTML file input forms, FileList is generated by multi-file upload fields just pass those in and the new system will handle everything for you. 
- As the comments state https://github.com/dash-incubator/dapp-image-uploader/blob/main/src/uploader.js#L15 you can ignore everything below that line if you implement into react etc. each framework handles things in their own way, that is mostly vanilla JS to read form input values etc. 

Each uploader can now be implemented in any JS framework or vanilla JS, all you need to do is include the following from the init file 
let initialized = false;

const init = async () => {
    if (initialized) {
        return;
    }

    initialized = await user.session.start();

    if (initialized) {
        await apps.upload.register();
    }
    else {
        setTimeout(init, (1000 * 30));
    }
};

and pass the input object to 
import { apps } from '@dash-incubator/dapp-sdk';

async function save(data) {
    let result = await apps.upload.image.save(
        await apps.upload.image.create(data)
    );

    console.log(result);
}

the 3rd key apps.upload.<audio, image, or video> picks the loader used for the upload/save process. 
